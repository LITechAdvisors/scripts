#!PS
#timeout=9000000

#=======================================================================
# Run PowerShell script based on OS architecture
#=======================================================================
if ( $env:PROCESSOR_ARCHITEW6432 -eq "AMD64" ) {
    if ( $myInvocation.Line ) {
        &"$env:systemroot\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive `
            -NoProfile $myInvocation.Line
    }
    else {
        &"$env:systemroot\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive `
            -NoProfile -file "$( $myInvocation.InvocationName )" $args
    }
    EXIT $lastEXITcode
}

#=======================================================================
# Variable Initializations
#=======================================================================
$ErrorActionPreference = 'Stop'
$WarningPreference = 'SilentlyContinue'

$MSMAURL = "https://prod.setup.itsupport247.net/windows/MSMA/32/StPatricks-360WestMainStreet_MSMA_ITSPlatform_TKNe66a9b64-cb84-4f6f-8e29-fbbf71f3ea21/MSI/setup"
$DPMAURL = "https://prod.setup.itsupport247.net/windows/DPMA/32/StPatricks-360WestMainStreet_DPMA_ITSPlatform_TKNe66a9b64-cb84-4f6f-8e29-fbbf71f3ea21/MSI/setup"
$TargetFileServer = "${env:TEMP}\StPatricks-360WestMainStreet_MSMA_ITSPlatform_TKNe66a9b64-cb84-4f6f-8e29-fbbf71f3ea21.msi"
$TargetFileDesktop = "${env:TEMP}\StPatricks-360WestMainStreet_DPMA_ITSPlatform_TKNe66a9b64-cb84-4f6f-8e29-fbbf71f3ea21.msi"

#=======================================================================
# Functions Definitions
#=======================================================================
function fcn-downloadFile {
    Param (
        [ Parameter( Mandatory = $true ) ]
        $url,
        [ Parameter( Mandatory = $true ) ]
        $targetFile
    )
    Process {
        try {
            $uri = New-Object "System.Uri" "$url"
            #$targetFile = "$TargetFileServer"
            $request = [System.Net.HttpWebRequest]::Create($uri)
            $request.set_Timeout(1200000)
            $response = $request.GetResponse()
            $responseStream = $response.GetResponseStream()
            $targetStream = New-Object -TypeName System.IO.FileStream -ArgumentList $targetFile, Create
            $buffer = new-object byte[] 10KB
            $count = $responseStream.Read($buffer, 0, $buffer.length)
            $downloadedBytes = $count
            while ($count -gt 0) {
                $targetStream.Write($buffer, 0, $count)
                $count = $responseStream.Read($buffer, 0, $buffer.length)
                $downloadedBytes = $downloadedBytes + $count
            }
            $targetStream.Flush()
            $targetStream.Close()
            $targetStream.Dispose()
            $responseStream.Dispose()
    
            if ( Test-Path $targetFile ) {
                return 0
            }
            else {
                return 1
            }
        }
        catch {
            return -1
        }
    }
}

function fcn-run-exe {
    Param (
        [ Parameter( Mandatory = $true ) ]
        $FPATH
    )
    Process {
        try {
            $ErrorActionPreference = 'Stop'
            $arg = @("/qn"; "/i"; "$FPATH") 
            $returncode = (Start-Process -FilePath msiexec.exe -ArgumentList $arg -Wait -Passthru).ExitCode
            if ( $returncode -eq 0 ) {
                return 0
            }
            else {
                return $returncode
            }
        }
        catch {
            return -1
        }
    }
}

 
#=======================================================================
# Code to Check Pre-Requisite to run script
#=======================================================================
try {
    #   OS Version & PS Version Check
    [int]$PSVersion = $PSVersionTable.PSVersion.Major
    [double]$OSVersion = [Environment]::OSVersion.Version.ToString( 2 ) 
    if ( ( $OSVersion -lt 6.1 ) -or ( $PSVersion -lt 2 ) ) {
        Write-Output "[MSG]: System is not compatible with the requirement. Either machine is below Server 2008R2/WIndows 7 or Powershell version is lower than 2.0"
        EXIT
    }
}
catch {
    Write-Output "Error Message: $($Error[0].Exception.Message)"
    EXIT
}


"$("-"*40)`n"
#=======================================================================
# Check for existence of services of RMM Agent
#=======================================================================
try {
    "Attempting to fetch status of RMM Agent services"
    $services = Get-Service -Name 'ITSPlatformManager', 'ITSPlatform' -ErrorAction Stop
    $services | ForEach-Object {
        "`nService Name   : $($_.DisplayName)"
        "Service Status : $($_.Status)"     
    }
    "RMM Agent found on machine. Hence, cannot proceed further for agent installation."
    EXIT
}
catch {
    "`n[ERROR] : Unable to get details of RMM Agent services due to below error"
    "$($Error[0].Tostring())"
    "`nSince, RMM Agent is not found on machine. Hence, proceeding further for agent installation."
}

#=======================================================================
# Check if current machine is DPMA or MSMA
#=======================================================================
$OSType = (Get-WmiObject -Class win32_ComputerSystem -ErrorAction Stop).DomainRole
if (($OSType -eq 1) -or ($OSType -eq 0)) {
    $Machine_type = "DPMA"
    "[INFO] : Current machine is DPMA"
}
else {
    $Machine_type = "MSMA"
    "[INFO] : Current machine is MSMA"
}

try {
    "`n$("="*40)`n"
    "Attempting to GET Agent Installer.`n"
    if ($Machine_type -eq "DPMA") {
        "[INFO] : Downloading DPMA RMM Agent Installer"
        $n_dl_result = fcn-downloadFile -url "$DPMAURL" -targetFile "$TargetFileDesktop"
        if ($n_dl_result -eq 0) {
            "[INFO] : The file was downloaded successfully."
        }
        elseif ( $n_dl_result -eq 1 ) {
            "[WARN] : Unable to download the DPMA RMM Agent Installer. Cannot proceed with Installation."
            "`n[INFO] : Please proceed manually with installation of agent."
            EXIT
        }
        elseif ( $n_dl_result -eq -1 ) {
            "[WARN] : Unable to download the DPMA RMM Agent Installer. $( $Error[ 0 ].ToString() ). Cannot proceed with Installation."
            "`n[INFO] : Please proceed manually with installation of agent."
            EXIT
        }

        "`n$("="*40)`n"
        "Attempting to execute Agent Installer.`n"
        "[INFO] : Installating DPMA RMM Agent"
        $in_result = fcn-run-exe -FPATH $TargetFileDesktop
        if ($in_result -eq 0) {
            "[INFO] : Agent should be successfully installed. Waiting for 20 seconds"
        }
        elseif ( $in_result -eq -1 ) {
            "[WARN] : Agent could not be installed due to an unexpected Error."
            "$($Error[ 0 ].ToString())"
        }
        else {
            "[WARN] : Agent could not be installed due to an unexpected Error (Return Code - $in_result)."
            "`n[INFO] : Please proceed manually for Agent installation."
        }
    }
    else {
        "[INFO] : Downloading MSMA RMM Agent Installer"
        $n_dl_result = fcn-downloadFile -url "$MSMAURL" -targetFile "$TargetFileServer"
        if ($n_dl_result -eq 0) {
            "[INFO] : The file was downloaded successfully."
        }
        elseif ( $n_dl_result -eq 1 ) {
            "[WARN] : Unable to download the MSMA RMM Agent Installer. Cannot proceed with Installation."
            "`n[INFO] : Please proceed manually with installation of agent."
            EXIT
        }
        elseif ( $n_dl_result -eq -1 ) {
            "[WARN] : Unable to download the MSMA RMM Agent Installer. $( $Error[ 0 ].ToString() ). Cannot proceed with Installation."
            "`n[INFO] : Please proceed manually with installation of agent."
            EXIT
        }

        "`n$("="*40)`n"
        "Attempting to execute Agent Installer.`n"
        "[INFO] : Installating MSMA RMM Agent"
        $in_result = fcn-run-exe -FPATH $TargetFileServer
        if ($in_result -eq 0) {
            "[INFO] : Agent should be successfully installed. Waiting for 20 seconds"
        }
        elseif ($in_result -eq -1) {
            "[WARN] : Agent could not be installed due to an unexpected Error."
            "$($Error[ 0 ].ToString())"
        }
        else {
            "[WARN] : Agent could not be installed due to an unexpected Error (Return Code - $in_result)."
            "`n[INFO] : Please proceed manually for Agent installation."
        }    
        
    }
}
catch {
    "`n[ERROR] : Unexpected error occurred during execution. Hence, terminating script execution."
    "$($Error[0].Tostring())"
}
finally {
    
    # Delete downloaded Installer.
    if ($TargetFileDesktop) {
        Remove-Item -Path $TargetFileDesktop -Force -ErrorAction SilentlyContinue
    }
    if ($TargetFileServer) {
        Remove-Item -Path $TargetFileServer -Force -ErrorAction SilentlyContinue
    }
}
